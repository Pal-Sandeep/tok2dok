"""fix: add pdf content field

Revision ID: 498c5e1ec70d
Revises: 99e8cc75209d
Create Date: 2025-04-18 17:52:30.389070

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '498c5e1ec70d'
down_revision: Union[str, None] = '99e8cc75209d'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('chat_history')
    op.drop_table('pdfs')
    op.drop_table('users')
    op.drop_table('usage_tracker')
    op.drop_table('payments')
    op.drop_table('pdf_chunks')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('pdf_chunks',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('pdf_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('chunk_text', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['pdf_id'], ['pdfs.id'], name='pdf_chunks_pdf_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='pdf_chunks_pkey')
    )
    op.create_table('payments',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('stripe_customer_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('subscription_status', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('next_billing_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='payments_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='payments_pkey')
    )
    op.create_table('usage_tracker',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('pdf_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('chat_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('limit_reached', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='usage_tracker_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='usage_tracker_pkey'),
    sa.UniqueConstraint('user_id', 'date', name='uix_user_date')
    )
    op.create_table('users',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('password_hash', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('uid', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('plan', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('last_login', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='users_pkey'),
    sa.UniqueConstraint('email', name='users_email_key'),
    sa.UniqueConstraint('uid', name='users_uid_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('pdfs',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('filename', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('upload_path', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('chunk_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='pdfs_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='pdfs_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('chat_history',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('pdf_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('question', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('answer', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('tokens_used', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['pdf_id'], ['pdfs.id'], name='chat_history_pdf_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='chat_history_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='chat_history_pkey')
    )
    # ### end Alembic commands ###
